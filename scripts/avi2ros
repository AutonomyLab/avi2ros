#!/usr/bin/env python

""" avi2ros.py - Version 0.1 2011-04-28

    Read in an AVI video file and republish as a ROS Image topic.

    Created for the Pi Robot Project: http://www.pirobot.org
    Copyright (c) 2011 Patrick Goebel.  All rights reserved.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details at:

    http://www.gnu.org/licenses/gpl.html

"""

import sys
import rospy
import cv2
import numpy as np
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError


class AVI2ROS:
    def __init__(self):
        rospy.init_node('avi2ros', anonymous=True)

        self.input = rospy.get_param("~input", "")

        self.fps = rospy.get_param("~fps", 0)
        self.loop = rospy.get_param("~loop", False)
        self.width = rospy.get_param("~width", "")
        self.height = rospy.get_param("~height", "")
        self.start_paused = rospy.get_param("~start_paused", False)
        self.show_viz = not rospy.get_param("~headless", False)
        self.show_text = True

        rospy.on_shutdown(self.cleanup)

        # TODO: Check Return Value
        video = cv2.VideoCapture(self.input)
        video_fps = video.get(cv2.cv.CV_CAP_PROP_FPS)

        if not self.fps:
            rospy.loginfo("FPS param not set. Reading it from video file ...")
            self.fps = video_fps

        rospy.loginfo("FPS has been set to %s" % (self.fps, ))

        image_pub = rospy.Publisher("output", Image, queue_size=self.fps)
        if self.show_viz:
            cv2.namedWindow("AVI Video", True)  # autosize the display
            cv2.moveWindow("AVI Video", 650, 100)

        bridge = CvBridge()

        self.paused = self.start_paused
        self.keystroke = None
        self.restart = False

        # Get the first frame to display if we are starting in the paused state.
        # TODO: Check return value
        ret, frame = video.read()
        image_size = frame.shape[1::-1]
        if (len(frame.shape) > 2):
            image_channels = frame.shape[2]
        else:
            image_channels = 1

        image_dtype = frame.dtype

        if self.width and self.height and (self.width != image_size[0] or self.height != image_size[1]):
            rospy.loginfo("Resizing! " + str(self.width) + " x " + str(self.height))
            resized_frame = np.zeros((self.width, self.height, image_channels), image_dtype)
            resized_frame = cv2.resize(frame, resized_frame.shape[1::-1])
            frame = resized_frame.copy()

        #text_frame = np.zeros((self.width, self.height, image_channels), image_dtype)

        max_delay = rospy.Duration.from_sec(1.0 / self.fps)

        last_publish_time = rospy.Time.now()
        delay = max_delay
        while not rospy.is_shutdown():
            """ Handle keyboard events """
            # Min non-destructive event-handler wait
            if (delay.to_sec() > 0.0):
                self.keystroke = cv2.waitKey(1)

            """ Process any keyboard commands """
            if 32 <= self.keystroke and self.keystroke < 128:
                cc = chr(self.keystroke).lower()
                if cc == 'q':
                    """ user has press the q key, so exit """
                    rospy.signal_shutdown("User hit q key to quit.")
                elif cc == ' ':
                    """ Pause or continue the video """
                    self.paused = not self.paused
                elif cc == 'r':
                    """ Restart the video from the beginning """
                    self.restart = True
                elif cc == 't':
                    """ Toggle display of text help message """
                    self.show_text = not self.show_text

            if self.restart:
                rospy.loginfo("restarting video from beginning")
                video.set(cv2.cv.CV_CAP_PROP_POS_AVI_RATIO, 0)
                self.restart = None

            if not self.paused:
                # TODO: Check return value
                ret, frame = video.read()
                if ret and self.width and self.height:
                    if self.width != image_size[0] or self.height != image_size[1]:
                        resized_frame = np.zeros((self.width, self.height, image_channels), image_dtype)
                        frame = resized_frame.copy()

            if not ret:
                if self.loop:
                    self.restart = True
            else:
                # if self.show_text:
                #     frame_size = cv.GetSize(frame)
                #     text_font = cv.InitFont(cv.CV_FONT_HERSHEY_SIMPLEX, 0.2, 1, 0, 1, 8)
                #     cv.PutText(text_frame, "Keyboard commands:", (20, int(frame_size[1] * 0.6)), text_font, cv.RGB(255, 255, 0))
                #     cv.PutText(text_frame, " ", (20, int(frame_size[1] * 0.65)), text_font, cv.RGB(255, 255, 0))
                #     cv.PutText(text_frame, "space - toggle pause/play", (20, int(frame_size[1] * 0.72)), text_font, cv.RGB(255, 255, 0))
                #     cv.PutText(text_frame, "     r - restart video from beginning", (20, int(frame_size[1] * 0.79)), text_font, cv.RGB(255, 255, 0))
                #     cv.PutText(text_frame, "     t - hide/show this text", (20, int(frame_size[1] * 0.86)), text_font, cv.RGB(255, 255, 0))
                #     cv.PutText(text_frame, "     q - quit the program", (20, int(frame_size[1] * 0.93)), text_font, cv.RGB(255, 255, 0))

                #cv.Add(frame, text_frame, text_frame)
                #if self.show_viz:
                #    cv.ShowImage("AVI Video", text_frame)
                #cv.Zero(text_frame)

                try:
                    now = rospy.Time.now()
                    last_loop_duration = now - last_publish_time
                    delay = max_delay - last_loop_duration
                    # No need to check/warn if delay<0.0 since rospy
                    # does not care
                    rospy.sleep(delay.to_sec())
                    last_publish_time = rospy.Time.now()
                    image_pub.publish(bridge.cv2_to_imgmsg(frame, "bgr8"))
                except CvBridgeError, e:
                    print e

    def cleanup(self):
            print "Shutting down vision node."
            cv2.destroyAllWindows()

def main(args):
    #help_message =  "Hot keys: \n" \
    #      "\tq     - quit the program\n" \
    #      "\tr     - restart video from beginning\n" \
    #       "\tspace - toggle pause/play\n"

    #print help_message

    print "example usage:"
    print "rosrun avi2ros avi2ros _input:=~/my_video.avi _loop:=True _headless:=True"
    print "publishes on topic /output"

    try:
        a2r = AVI2ROS()
    except KeyboardInterrupt:
        print "Shutting down avi2ros..."
        cv2.destroyAllWindows()

if __name__ == '__main__':
    main(sys.argv)
